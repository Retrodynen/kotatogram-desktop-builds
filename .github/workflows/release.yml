name: Release

on:
  release:
    types: [created]

jobs:

  parse:
    name: Parse release
    runs-on: ubuntu-latest
    steps:
      - name: Parse release description
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            function parseRef(s) {
              let pattern = /^(?:ref(?:erence)?|commit|tag|branch):\s*(.*)$/gmi;
              let matches = pattern.exec(s);
              if (!matches || matches.length < 1) return "master";

              return matches[1];
            }

            function parseBuild(s) {
              let pattern = /^(?:builds?|platforms?|OS(?:es)?):\s*(?:(appimage|linux|win(?:dows)?)(?:,\s*(appimage|linux|win(?:dows)?))*)$/gmi;
              let matches = pattern.exec(s);
              let all = ["appimage", "windows"];
              if (!matches || matches.length < 1) return all;

              let builds = [];
              for (let i = 1; i < matches.length; i++) {
                if (!matches[i]) continue;

                switch (matches[i].toLowerCase()) {
                  case "appimage":
                  case "windows":
                    builds.push(matches[i].toLowerCase());
                    break;

                  case "win":
                    builds.push("windows");
                    break;
                  
                  case "linux":
                    builds.push("appimage");
                    break;

                  default:
                    console.warn("Unknown build: " + matches[i]);
                }
              }

              if (!builds.length) return all;
              return builds;
            }

            function parseUpdate(s) {
              let pattern = /^upd(?:ater?)?:\s*(yes|no|true|false|enable|disable|on|off|0|1)$/gmi;
              let matches = pattern.exec(s);
              if (!matches || matches.length < 1) return true;

              switch (matches[1]) {
                case "yes":
                case "true":
                case "enable":
                case "on":
                case "1":
                  return true;

                default:
                  return false;
              }
            }

            console.log("Current description:");
            console.log(context.payload.release.body);

            let requestParams = {
              ref: parseRef(context.payload.release.body),
              display_version: context.payload.release.tag_name,
              release_url: context.payload.release.upload_url,
              update: parseUpdate(context.payload.release.body),
            };
            
            console.log("Parsed parameters:");
            console.log(requestParams);

            let builds = parseBuild(context.payload.release.body);

            console.log("Builds:");
            console.log(builds);

            for (const build of builds) {
              github.repos.createDispatchEvent({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                event_type: 'build_'+build,
                client_payload: { options: requestParams },
              });
            }
